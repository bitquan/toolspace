name: Dev Log Updater

on:
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number that was merged'
        required: true
        type: string
      issue_number:
        description: 'Issue number that was completed'
        required: false
        type: string
  push:
    branches:
      - main
    paths:
      - '!docs/dev-log/**'  # Don't trigger on dev-log changes to avoid loops

permissions:
  contents: write
  pull-requests: read
  issues: read

jobs:
  update-dev-log:
    name: Update Development Log
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Get recent activity and create log entry
        uses: actions/github-script@v8
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Get input parameters
            const prNumber = context.payload.inputs?.pr_number;
            const issueNumber = context.payload.inputs?.issue_number;

            console.log(`Creating dev log entry for PR: ${prNumber}, Issue: ${issueNumber}`);

            let logEntry = '';
            const timestamp = new Date().toISOString().split('T')[0]; // YYYY-MM-DD

            if (prNumber) {
              // Get PR details
              try {
                const pr = await github.rest.pulls.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: parseInt(prNumber)
                });

                logEntry += `## ${timestamp} - ${pr.data.title}\n\n`;
                logEntry += `**Type**: ${pr.data.head.ref.split('/')[0] || 'unknown'}\n`;
                logEntry += `**PR**: #${prNumber}\n`;
                if (issueNumber) {
                  logEntry += `**Issue**: #${issueNumber}\n`;
                }
                logEntry += `**Branch**: \`${pr.data.head.ref}\`\n`;
                logEntry += `**Merged**: ${pr.data.merged_at}\n\n`;

                if (pr.data.body) {
                  logEntry += `**Description**:\n${pr.data.body}\n\n`;
                }

                // Get commit details
                const commits = await github.rest.pulls.listCommits({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: parseInt(prNumber)
                });

                if (commits.data.length > 0) {
                  logEntry += `**Changes**:\n`;
                  commits.data.forEach(commit => {
                    const message = commit.commit.message.split('\n')[0];
                    logEntry += `- ${message} (\`${commit.sha.substring(0, 7)}\`)\n`;
                  });
                  logEntry += '\n';
                }

                // Get file changes
                const files = await github.rest.pulls.listFiles({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: parseInt(prNumber)
                });

                if (files.data.length > 0) {
                  logEntry += `**Files Modified**: ${files.data.length} files\n`;
                  const additions = files.data.reduce((sum, file) => sum + file.additions, 0);
                  const deletions = files.data.reduce((sum, file) => sum + file.deletions, 0);
                  logEntry += `**Lines**: +${additions} -${deletions}\n\n`;

                  logEntry += `<details>\n<summary>Files changed</summary>\n\n`;
                  files.data.forEach(file => {
                    const status = file.status === 'added' ? '➕' :
                                 file.status === 'removed' ? '🗑️' :
                                 file.status === 'modified' ? '✏️' : '📝';
                    logEntry += `${status} \`${file.filename}\` (+${file.additions} -${file.deletions})\n`;
                  });
                  logEntry += `\n</details>\n\n`;
                }

              } catch (error) {
                console.log(`Could not fetch PR details: ${error.message}`);
                logEntry += `## ${timestamp} - Auto-generated entry\n\n`;
                logEntry += `**PR**: #${prNumber} (details unavailable)\n`;
                if (issueNumber) {
                  logEntry += `**Issue**: #${issueNumber}\n`;
                }
                logEntry += '\n';
              }
            } else {
              // Get recent commits since this might be a direct push
              const commits = await github.rest.repos.listCommits({
                owner: context.repo.owner,
                repo: context.repo.repo,
                sha: context.sha,
                per_page: 5
              });

              logEntry += `## ${timestamp} - Direct commit(s)\n\n`;
              logEntry += `**Commits**:\n`;
              commits.data.forEach(commit => {
                const message = commit.commit.message.split('\n')[0];
                logEntry += `- ${message} (\`${commit.sha.substring(0, 7)}\`)\n`;
              });
              logEntry += '\n';
            }

            // Create dev-log directory if it doesn't exist
            const devLogDir = 'docs/dev-log';
            if (!fs.existsSync(devLogDir)) {
              fs.mkdirSync(devLogDir, { recursive: true });
            }

            // Determine log file name (monthly)
            const yearMonth = timestamp.substring(0, 7); // YYYY-MM
            const logFileName = `${devLogDir}/${yearMonth}.md`;

            let existingContent = '';
            if (fs.existsSync(logFileName)) {
              existingContent = fs.readFileSync(logFileName, 'utf8');
            } else {
              // Create new monthly log file
              existingContent = `# Development Log - ${yearMonth}\n\n` +
                               `This file contains the development activity log for ${yearMonth}.\n\n` +
                               `---\n\n`;
            }

            // Add new entry at the top (after header)
            const lines = existingContent.split('\n');
            const headerEnd = lines.findIndex(line => line === '---');

            if (headerEnd !== -1) {
              lines.splice(headerEnd + 1, 0, '', logEntry.trim(), '');
            } else {
              // If no header found, just prepend
              existingContent = logEntry + '\n' + existingContent;
            }

            const newContent = headerEnd !== -1 ? lines.join('\n') : existingContent;

            // Write the updated log file
            fs.writeFileSync(logFileName, newContent);

            console.log(`✅ Updated dev log: ${logFileName}`);

            // Update the main dev-log index if it exists
            const indexFile = `${devLogDir}/README.md`;
            let indexContent = '';

            if (fs.existsSync(indexFile)) {
              indexContent = fs.readFileSync(indexFile, 'utf8');
            } else {
              indexContent = `# Development Log\n\n` +
                           `This directory contains the development activity logs.\n\n` +
                           `## Monthly Logs\n\n`;
            }

            // Check if this month is already listed
            const monthEntry = `- [${yearMonth}](${yearMonth}.md)`;
            if (!indexContent.includes(monthEntry)) {
              // Add to the list (keep it sorted)
              const lines = indexContent.split('\n');
              const logSectionStart = lines.findIndex(line => line.includes('## Monthly Logs'));

              if (logSectionStart !== -1) {
                // Find where to insert (keep reverse chronological order)
                let insertIndex = logSectionStart + 2;
                while (insertIndex < lines.length && lines[insertIndex].startsWith('- [')) {
                  const existingMonth = lines[insertIndex].match(/\[(\d{4}-\d{2})\]/);
                  if (existingMonth && existingMonth[1] < yearMonth) {
                    break;
                  }
                  insertIndex++;
                }

                lines.splice(insertIndex, 0, monthEntry);
                indexContent = lines.join('\n');

                fs.writeFileSync(indexFile, indexContent);
                console.log(`✅ Updated dev log index: ${indexFile}`);
              }
            }

            // Set outputs for commit step
            core.setOutput('log_file', logFileName);
            core.setOutput('has_changes', 'true');

      - name: Commit dev log changes
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Check if there are changes
          if git diff --quiet; then
            echo "No changes to commit"
            exit 0
          fi

          # Add and commit changes
          git add docs/dev-log/

          if [ -n "${{ github.event.inputs.pr_number }}" ]; then
            commit_msg="📝 Update dev log for PR #${{ github.event.inputs.pr_number }}"
            if [ -n "${{ github.event.inputs.issue_number }}" ]; then
              commit_msg="$commit_msg (Issue #${{ github.event.inputs.issue_number }})"
            fi
          else
            commit_msg="📝 Update dev log - $(date '+%Y-%m-%d')"
          fi

          git commit -m "$commit_msg"
          git push

          echo "✅ Dev log committed and pushed"

      - name: Create summary
        if: always()
        run: |
          echo "## Dev Log Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**PR Number**: ${{ github.event.inputs.pr_number || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Issue Number**: ${{ github.event.inputs.issue_number || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Log File**: docs/dev-log/$(date '+%Y-%m').md" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The development log has been automatically updated with the latest activity." >> $GITHUB_STEP_SUMMARY
