name: Test Runner (Reusable)

on:
    workflow_call:
        inputs:
            run_flutter_tests:
                description: "Run Flutter tests"
                required: false
                default: true
                type: boolean
            run_functions_tests:
                description: "Run Firebase Functions tests"
                required: false
                default: true
                type: boolean
            upload_coverage:
                description: "Upload test coverage artifacts"
                required: false
                default: true
                type: boolean
            timeout_minutes:
                description: "Timeout for the entire workflow"
                required: false
                default: 15
                type: number
        outputs:
            flutter_result:
                description: "Result of Flutter tests"
                value: ${{ jobs.flutter-tests.outputs.result }}
            functions_result:
                description: "Result of Functions tests"
                value: ${{ jobs.functions-tests.outputs.result }}
            coverage_available:
                description: "Whether coverage data is available"
                value: ${{ jobs.flutter-tests.outputs.coverage_available }}

jobs:
    functions-tests:
        name: Firebase Functions Tests
        runs-on: ubuntu-latest
        timeout-minutes: ${{ inputs.timeout_minutes }}
        if: inputs.run_functions_tests
        outputs:
            result: ${{ steps.test.outcome }}

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v5
              with:
                  node-version: "20"
                  cache: "npm"
                  cache-dependency-path: functions/package-lock.json

            - name: Install dependencies
              run: |
                  cd functions
                  npm ci

            - name: Run Functions tests
              id: test
              run: |
                  cd functions
                  echo "::group::Firebase Functions Tests"
                  npm test
                  echo "::endgroup::"

            - name: Run Functions QA checks
              if: steps.test.outcome == 'success'
              run: |
                  cd functions
                  echo "::group::Functions QA (lint, format, build)"
                  npm run qa
                  echo "::endgroup::"

    flutter-tests:
        name: Flutter Tests
        runs-on: ubuntu-latest
        timeout-minutes: ${{ inputs.timeout_minutes }}
        if: inputs.run_flutter_tests
        outputs:
            result: ${{ steps.test.outcome }}
            coverage_available: ${{ steps.coverage.outputs.available }}

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Flutter
              uses: subosito/flutter-action@v2
              with:
                  channel: "stable"
        
                  cache: true

            - name: Flutter version info
              run: flutter --version

            - name: Get dependencies
              run: |
                  echo "::group::Getting Flutter dependencies"
                  flutter pub get
                  echo "::endgroup::"

            - name: Format check
              run: |
                  echo "::group::Checking code formatting"
                  dart format --output=none --set-exit-if-changed .
                  echo "::endgroup::"

            - name: Analyze code
              run: |
                  echo "::group::Running static analysis"
                  flutter analyze
                  echo "::endgroup::"

            - name: Run Flutter tests
              id: test
              run: |
                  echo "::group::Running Flutter tests"
                  if [ -d "test" ]; then
                    flutter test --coverage
                  else
                    echo "No test directory found, skipping Flutter tests"
                  fi
                  echo "::endgroup::"

            - name: Check coverage availability
              id: coverage
              run: |
                  if [ -f "coverage/lcov.info" ]; then
                    echo "available=true" >> $GITHUB_OUTPUT
                    echo "Coverage file found: coverage/lcov.info"
                  else
                    echo "available=false" >> $GITHUB_OUTPUT
                    echo "No coverage file found"
                  fi

            - name: Upload coverage artifact
              if: inputs.upload_coverage && steps.coverage.outputs.available == 'true'
              uses: actions/upload-artifact@v4
              with:
                  name: flutter-coverage-${{ github.run_id }}
                  path: coverage/lcov.info
                  retention-days: 30

    test-summary:
        name: Test Summary
        runs-on: ubuntu-latest
        needs: [functions-tests, flutter-tests]
        if: always()

        steps:
            - name: Report test results
              run: |
                  echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY

                  # Functions tests result
                  if [ "${{ inputs.run_functions_tests }}" = "true" ]; then
                    functions_result="${{ needs.functions-tests.outputs.result }}"
                    if [ "$functions_result" = "success" ]; then
                      echo "✅ **Firebase Functions**: Tests passed" >> $GITHUB_STEP_SUMMARY
                    elif [ "$functions_result" = "failure" ]; then
                      echo "❌ **Firebase Functions**: Tests failed" >> $GITHUB_STEP_SUMMARY
                    else
                      echo "⚠️ **Firebase Functions**: Tests skipped or cancelled" >> $GITHUB_STEP_SUMMARY
                    fi
                  else
                    echo "⏭️ **Firebase Functions**: Skipped" >> $GITHUB_STEP_SUMMARY
                  fi

                  # Flutter tests result
                  if [ "${{ inputs.run_flutter_tests }}" = "true" ]; then
                    flutter_result="${{ needs.flutter-tests.outputs.result }}"
                    if [ "$flutter_result" = "success" ]; then
                      echo "✅ **Flutter**: Tests passed" >> $GITHUB_STEP_SUMMARY
                    elif [ "$flutter_result" = "failure" ]; then
                      echo "❌ **Flutter**: Tests failed" >> $GITHUB_STEP_SUMMARY
                    else
                      echo "⚠️ **Flutter**: Tests skipped or cancelled" >> $GITHUB_STEP_SUMMARY
                    fi

                    # Coverage info
                    if [ "${{ needs.flutter-tests.outputs.coverage_available }}" = "true" ]; then
                      echo "📊 **Coverage**: Available as artifact" >> $GITHUB_STEP_SUMMARY
                    fi
                  else
                    echo "⏭️ **Flutter**: Skipped" >> $GITHUB_STEP_SUMMARY
                  fi

                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "**Workflow**: ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
                  echo "**Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
                  echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY

            - name: Check if any tests failed
              run: |
                  functions_failed=false
                  flutter_failed=false

                  if [ "${{ inputs.run_functions_tests }}" = "true" ] && [ "${{ needs.functions-tests.outputs.result }}" = "failure" ]; then
                    functions_failed=true
                  fi

                  if [ "${{ inputs.run_flutter_tests }}" = "true" ] && [ "${{ needs.flutter-tests.outputs.result }}" = "failure" ]; then
                    flutter_failed=true
                  fi

                  if [ "$functions_failed" = "true" ] || [ "$flutter_failed" = "true" ]; then
                    echo "❌ One or more test suites failed"
                    exit 1
                  fi

                  echo "✅ All enabled test suites passed"
