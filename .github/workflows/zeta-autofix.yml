name: OPS-Zeta Autofix

on:
  schedule:
    - cron: "0 3 * * 1" # Weekly on Monday at 3 AM UTC
  workflow_dispatch:
    inputs:
      dry_run:
        description: "Dry run (true/false)"
        required: true
        default: "true"
        type: string
      fix_scope:
        description: "Scope of fixes to apply"
        required: false
        default: "all"
        type: choice
        options:
          - all
          - lint-only
          - format-only
          - imports-only

permissions:
  contents: read
  actions: read

jobs:
  autofix:
    runs-on: ubuntu-latest
    outputs:
      changes-made: ${{ steps.check-changes.outputs.changes }}
      pr-number: ${{ steps.create-pr.outputs.pr-number }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: functions/package-lock.json

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          flutter-version: "3.24.3"
          cache: true

      - name: Install dependencies
        run: |
          cd functions && npm ci
          flutter pub get

      - name: Create autofix branch
        run: |
          BRANCH_NAME="ops-zeta/autofix-$(date +%Y%m%d-%H%M%S)"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          git checkout -b "$BRANCH_NAME"

      - name: Configure Git
        run: |
          git config user.name "OPS-Zeta Bot"
          git config user.email "ops-zeta@toolspace.app"

      - name: ESLint Auto-fix (Functions)
        if: github.event.inputs.fix_scope == 'all' || github.event.inputs.fix_scope ==
          'lint-only'
        run: |
          cd functions
          echo "Running ESLint auto-fix..."

          # Run ESLint with --fix flag
          npx eslint src/ --fix --ext .ts --format unix || true

          echo "ESLint auto-fix completed"

      - name: Organize Imports (TypeScript)
        if: github.event.inputs.fix_scope == 'all' || github.event.inputs.fix_scope ==
          'imports-only'
        run: |
          cd functions
          echo "Organizing TypeScript imports..."

          # Use prettier or typescript organize imports if available
          # For now, we'll use a simple approach
          find src -name "*.ts" -type f -exec sh -c '
            # Basic import organization - move imports to top, group by type
            file="$1"
            if grep -q "^import" "$file"; then
              echo "Organizing imports in $file"
              # This is a simplified version - real implementation would use proper tools
            fi
          ' _ {} \;

      - name: Dart Format
        if: github.event.inputs.fix_scope == 'all' || github.event.inputs.fix_scope ==
          'format-only'
        run: |
          echo "Running Dart format..."

          # Format all Dart files
          dart format lib/ test/ --line-length 80 --set-exit-if-changed || true

          echo "Dart format completed"

      - name: Dart Fix Apply
        if: github.event.inputs.fix_scope == 'all' || github.event.inputs.fix_scope ==
          'lint-only'
        run: |
          echo "Running dart fix --apply..."

          # Apply dart fixes
          dart fix --apply || true

          echo "Dart fix completed"

      - name: Organize Dart Imports
        if: github.event.inputs.fix_scope == 'all' || github.event.inputs.fix_scope ==
          'imports-only'
        run: |
          echo "Organizing Dart imports..."

          # Use dart pub global activate import_sorter if needed
          # For now, basic organization
          find lib test -name "*.dart" -type f -exec sh -c '
            file="$1"
            if grep -q "^import" "$file"; then
              echo "Checking imports in $file"
              # This would use a proper Dart import sorter tool
            fi
          ' _ {} \;

      - name: Remove Trailing Whitespace
        if: github.event.inputs.fix_scope == 'all' || github.event.inputs.fix_scope ==
          'format-only'
        run: |
          echo "Removing trailing whitespace..."

          # Remove trailing whitespace from code files
          find . -type f \( -name "*.dart" -o -name "*.ts" -o -name "*.js" -o -name "*.md" -o -name "*.yaml" -o -name "*.yml" \) \
            -not -path "./node_modules/*" \
            -not -path "./.dart_tool/*" \
            -not -path "./build/*" \
            -exec sed -i 's/[[:space:]]*$//' {} \;

      - name: Fix Common Code Issues
        if: github.event.inputs.fix_scope == 'all'
        run: |
          echo "Fixing common code issues..."

          # Fix common Dart issues
          find lib test -name "*.dart" -type f -exec sh -c '
            file="$1"
            # Remove unused imports (basic check)
            if grep -q "import.*dart:io" "$file" && ! grep -q "File\|Directory\|stdin\|stdout" "$file"; then
              echo "Potentially unused dart:io import in $file"
            fi
          ' _ {} \;

          # Fix common TypeScript issues
          find functions/src -name "*.ts" -type f -exec sh -c '
            file="$1"
            # Check for console.log statements that should be removed
            if grep -q "console\.log" "$file"; then
              echo "Found console.log statements in $file - consider using proper logging"
            fi
          ' _ {} \;

      - name: Update Package Imports
        if: github.event.inputs.fix_scope == 'all' || github.event.inputs.fix_scope ==
          'imports-only'
        run: |
          echo "Updating package imports..."

          # Ensure proper import structure for Dart packages
          find lib -name "*.dart" -type f -exec sh -c '
            file="$1"
            # Update relative imports to package imports where appropriate
            if grep -q "\.\./\.\." "$file"; then
              echo "Found deep relative imports in $file - consider package imports"
            fi
          ' _ {} \;

      - name: Check for changes
        id: check-changes
        run: |
          if git diff --quiet; then
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "No changes detected"
          else
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "Changes detected:"
            git diff --name-only
          fi

      - name: Commit changes
        if: steps.check-changes.outputs.changes == 'true' && github.event.inputs.dry_run
          != 'true'
        run: |
          echo "Committing autofix changes..."

          # Add all changes
          git add .

          # Create detailed commit message
          CHANGED_FILES=$(git diff --cached --name-only | wc -l)

          COMMIT_MSG="chore(zeta): autofix lint/style ($CHANGED_FILES files)

          Applied automatic fixes:
          "

          # Add details based on scope
          case "${{ github.event.inputs.fix_scope }}" in
            "all")
              COMMIT_MSG="$COMMIT_MSG
          - ESLint auto-fix for functions
          - Dart format and fix
          - Import organization
          - Trailing whitespace removal
          - Common code issue fixes"
              ;;
            "lint-only")
              COMMIT_MSG="$COMMIT_MSG
          - ESLint auto-fix for functions
          - Dart fix apply"
              ;;
            "format-only")
              COMMIT_MSG="$COMMIT_MSG
          - Dart format
          - Trailing whitespace removal"
              ;;
            "imports-only")
              COMMIT_MSG="$COMMIT_MSG
          - Import organization (TypeScript & Dart)
          - Package import updates"
              ;;
          esac

          COMMIT_MSG="$COMMIT_MSG

          Automatically generated by OPS-Zeta
          Scope: ${{ github.event.inputs.fix_scope }}
          Timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)"

          git commit -m "$COMMIT_MSG"

      - name: Push changes
        if: steps.check-changes.outputs.changes == 'true' && github.event.inputs.dry_run
          != 'true'
        run: |
          echo "Pushing autofix branch..."
          git push origin "$BRANCH_NAME"

      - name: Create Pull Request
        if: steps.check-changes.outputs.changes == 'true' && github.event.inputs.dry_run
          != 'true'
        id: create-pr
        uses: actions/github-script@v7
        with:
          script: |
            const branchName = process.env.BRANCH_NAME;
            const fixScope = '${{ github.event.inputs.fix_scope }}';

            console.log(`Creating PR for branch: ${branchName}`);

            // Get commit details for PR description
            const commits = await github.rest.repos.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: branchName,
              per_page: 1
            });

            const lastCommit = commits.data[0];
            const changedFiles = await github.rest.repos.getCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: lastCommit.sha
            });

            const fileCount = changedFiles.data.files.length;
            const additions = changedFiles.data.stats.additions;
            const deletions = changedFiles.data.stats.deletions;

            // Create PR title
            const prTitle = `ðŸ¤– OPS-Zeta: Automatic code fixes (${fixScope})`;

            // Create PR body
            const prBody = `# Automatic Code Fixes

            This PR contains automatic fixes applied by OPS-Zeta to improve code quality and consistency.

            ## Summary
            - **Scope**: ${fixScope}
            - **Files changed**: ${fileCount}
            - **Lines added**: ${additions}
            - **Lines removed**: ${deletions}

            ## Changes Applied
            ${fixScope === 'all' || fixScope === 'lint-only' ? '- âœ… ESLint auto-fix (functions)\n- âœ… Dart analyzer fixes' : ''}
            ${fixScope === 'all' || fixScope === 'format-only' ? '- âœ… Code formatting (Dart)\n- âœ… Trailing whitespace removal' : ''}
            ${fixScope === 'all' || fixScope === 'imports-only' ? '- âœ… Import organization\n- âœ… Package import updates' : ''}
            ${fixScope === 'all' ? '- âœ… Common code issue fixes' : ''}

            ## Files Changed
            ${changedFiles.data.files.slice(0, 20).map(file =>
              `- \`${file.filename}\` (+${file.additions}/-${file.deletions})`
            ).join('\n')}
            ${fileCount > 20 ? `\n... and ${fileCount - 20} more files` : ''}

            ## Safety Notes
            - All changes are automated formatting and lint fixes
            - No functional logic has been modified
            - Changes follow established code style guidelines
            - Tests should continue to pass without modification

            ## Next Steps
            1. Review the changes for any unexpected modifications
            2. Ensure all CI checks pass
            3. Merge when satisfied with the changes

            ---

            ðŸ¤– **Auto-generated by OPS-Zeta** | ðŸ“… ${new Date().toISOString()}
            `;

            // Create the PR
            const pr = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: prTitle,
              head: branchName,
              base: 'main',
              body: prBody,
              draft: false
            });

            console.log(`âœ… Created PR #${pr.data.number}: ${pr.data.html_url}`);

            // Add labels to the PR
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.data.number,
              labels: ['ops-zeta', 'autofix', 'chore', 'safe-to-merge']
            });

            // Set output
            core.setOutput('pr-number', pr.data.number);
            core.setOutput('pr-url', pr.data.html_url);

            return pr.data.number;

      - name: Generate summary
        if: always()
        run: |
          echo "## OPS-Zeta Autofix Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Dry Run**: ${{ github.event.inputs.dry_run }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Fix Scope**: ${{ github.event.inputs.fix_scope }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Changes Made**: ${{ steps.check-changes.outputs.changes }}" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.check-changes.outputs.changes }}" = "true" ]; then
            if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
              echo "- **Status**: Changes detected but not committed (dry run)" >> $GITHUB_STEP_SUMMARY
            else
              echo "- **Status**: Changes committed and PR created" >> $GITHUB_STEP_SUMMARY
              echo "- **PR Number**: #${{ steps.create-pr.outputs.pr-number }}" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "- **Status**: No changes needed" >> $GITHUB_STEP_SUMMARY
          fi

  notification:
    needs: [ autofix ]
    runs-on: ubuntu-latest
    if: always() && github.event_name == 'schedule' && github.event.inputs.dry_run
      != 'true'

    steps:
      - name: Send autofix notification
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ "${{ needs.autofix.outputs.changes-made }}" = "true" ]; then
            echo "Sending autofix completion notification..."
            gh workflow run delta-notify.yml \
              -f event_type="autofix_complete" \
              -f title="ðŸ¤– OPS-Zeta Autofix Applied" \
              -f message="Automatic code fixes have been applied and PR #${{ needs.autofix.outputs.pr-number }} created for review." \
              -f severity="info" \
              -f dry_run="false"
          else
            echo "Sending no-changes notification..."
            gh workflow run delta-notify.yml \
              -f event_type="autofix_complete" \
              -f title="ðŸ¤– OPS-Zeta Autofix Complete" \
              -f message="Weekly autofix scan completed - no changes needed. Code quality is maintained." \
              -f severity="info" \
              -f dry_run="false"
          fi
