name: "üßπ OPS-Zeta Workflow Cleanup"

on:
  workflow_dispatch:
    inputs:
      cleanup_scope:
        description: "What to clean up"
        required: true
        default: "failed_runs"
        type: choice
        options:
          - "failed_runs"
          - "old_runs"
          - "all_runs"
          - "logs_only"
          - "cache_cleanup"
          - "full_cleanup"
      days_to_keep:
        description: "Days to keep (for old_runs cleanup)"
        required: false
        default: "7"
        type: string
      dry_run:
        description: "Preview actions without making changes"
        required: false
        default: "true"
        type: choice
        options:
          - "true"
          - "false"

permissions:
  actions: write
  contents: read

jobs:
  cleanup-analysis:
    name: "üîç Analyze Cleanup Scope"
    runs-on: ubuntu-latest
    outputs:
      cleanup_plan: ${{ steps.analysis.outputs.cleanup_plan }}
      total_runs: ${{ steps.analysis.outputs.total_runs }}
      failed_runs: ${{ steps.analysis.outputs.failed_runs }}
      old_runs: ${{ steps.analysis.outputs.old_runs }}
    
    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v4

      - name: "Analyze Workflow Runs"
        id: analysis
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "üîç Analyzing workflow runs for cleanup..."
          
          # Get all workflow runs
          ALL_RUNS=$(gh run list --limit 500 --json databaseId,status,conclusion,createdAt,workflowName)
          TOTAL_RUNS=$(echo "$ALL_RUNS" | jq 'length')
          
          # Count failed runs
          FAILED_RUNS=$(echo "$ALL_RUNS" | jq '[.[] | select(.conclusion == "failure" or .conclusion == "cancelled")] | length')
          
          # Count old runs (older than specified days)
          DAYS_AGO=$(date -d "${{ github.event.inputs.days_to_keep || 7 }} days ago" +%Y-%m-%d)
          OLD_RUNS=$(echo "$ALL_RUNS" | jq --arg cutoff "$DAYS_AGO" '[.[] | select(.createdAt < $cutoff)] | length')
          
          echo "üìä Cleanup Analysis Results:"
          echo "- Total workflow runs: $TOTAL_RUNS"
          echo "- Failed/cancelled runs: $FAILED_RUNS"
          echo "- Runs older than ${{ github.event.inputs.days_to_keep || 7 }} days: $OLD_RUNS"
          
          # Generate cleanup plan
          CLEANUP_SCOPE="${{ github.event.inputs.cleanup_scope }}"
          case "$CLEANUP_SCOPE" in
            "failed_runs")
              CLEANUP_PLAN="Delete $FAILED_RUNS failed/cancelled workflow runs"
              ;;
            "old_runs")
              CLEANUP_PLAN="Delete $OLD_RUNS workflow runs older than ${{ github.event.inputs.days_to_keep || 7 }} days"
              ;;
            "all_runs")
              CLEANUP_PLAN="Delete all $TOTAL_RUNS workflow runs"
              ;;
            "logs_only")
              CLEANUP_PLAN="Clear logs from $TOTAL_RUNS workflow runs (keeping run records)"
              ;;
            "cache_cleanup")
              CLEANUP_PLAN="Clean GitHub Actions cache and artifacts"
              ;;
            "full_cleanup")
              CLEANUP_PLAN="Full cleanup: delete all runs, clear cache, clean artifacts"
              ;;
          esac
          
          echo "üßπ Cleanup Plan: $CLEANUP_PLAN"
          
          # Set outputs
          echo "cleanup_plan=$CLEANUP_PLAN" >> $GITHUB_OUTPUT
          echo "total_runs=$TOTAL_RUNS" >> $GITHUB_OUTPUT
          echo "failed_runs=$FAILED_RUNS" >> $GITHUB_OUTPUT
          echo "old_runs=$OLD_RUNS" >> $GITHUB_OUTPUT

  workflow-cleanup:
    name: "üßπ Execute Workflow Cleanup"
    runs-on: ubuntu-latest
    needs: cleanup-analysis
    if: github.event.inputs.dry_run == 'false'
    
    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v4

      - name: "Execute Failed Runs Cleanup"
        if: github.event.inputs.cleanup_scope == 'failed_runs' || github.event.inputs.cleanup_scope == 'full_cleanup'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "üóëÔ∏è Cleaning up failed/cancelled workflow runs..."
          
          # Get failed/cancelled runs
          FAILED_RUNS=$(gh run list --limit 500 --json databaseId,status,conclusion,workflowName --jq '.[] | select(.conclusion == "failure" or .conclusion == "cancelled") | .databaseId')
          
          if [ -z "$FAILED_RUNS" ]; then
            echo "‚úÖ No failed runs to clean up"
          else
            echo "Found failed runs to delete:"
            echo "$FAILED_RUNS" | while read -r run_id; do
              echo "  Deleting run ID: $run_id"
              gh run delete "\$run_id" || echo "    ‚ö†Ô∏è Failed to delete run $run_id"
              sleep 1  # Rate limiting
            done
          fi

      - name: "Execute Old Runs Cleanup"
        if: github.event.inputs.cleanup_scope == 'old_runs' || github.event.inputs.cleanup_scope == 'full_cleanup'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "üóëÔ∏è Cleaning up old workflow runs..."
          
          # Calculate cutoff date
          DAYS_AGO=$(date -d "${{ github.event.inputs.days_to_keep || 7 }} days ago" +%Y-%m-%d)
          echo "Deleting runs older than: $DAYS_AGO"
          
          # Get old runs
          OLD_RUNS=$(gh run list --limit 500 --json databaseId,createdAt --jq --arg cutoff "$DAYS_AGO" '.[] | select(.createdAt < $cutoff) | .databaseId')
          
          if [ -z "$OLD_RUNS" ]; then
            echo "‚úÖ No old runs to clean up"
          else
            echo "Found old runs to delete:"
            echo "$OLD_RUNS" | while read -r run_id; do
              echo "  Deleting run ID: $run_id"
              gh run delete "\$run_id" || echo "    ‚ö†Ô∏è Failed to delete run $run_id"
              sleep 1  # Rate limiting
            done
          fi

      - name: "Execute All Runs Cleanup"
        if: github.event.inputs.cleanup_scope == 'all_runs' || github.event.inputs.cleanup_scope == 'full_cleanup'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "üóëÔ∏è Cleaning up ALL workflow runs..."
          echo "‚ö†Ô∏è WARNING: This will delete ALL workflow run history!"
          
          # Get all runs
          ALL_RUNS=$(gh run list --limit 500 --json databaseId --jq '.[] | .databaseId')
          
          if [ -z "$ALL_RUNS" ]; then
            echo "‚úÖ No runs to clean up"
          else
            echo "Found runs to delete:"
            echo "$ALL_RUNS" | while read -r run_id; do
              echo "  Deleting run ID: $run_id"
              gh run delete "\$run_id" || echo "    ‚ö†Ô∏è Failed to delete run $run_id"
              sleep 1  # Rate limiting
            done
          fi

      - name: "Execute Cache Cleanup"
        if: github.event.inputs.cleanup_scope == 'cache_cleanup' || github.event.inputs.cleanup_scope == 'full_cleanup'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "üóëÔ∏è Cleaning up GitHub Actions cache..."
          
          # Clean up caches
          CACHES=$(gh cache list --json id --jq '.[] | .id')
          
          if [ -z "$CACHES" ]; then
            echo "‚úÖ No caches to clean up"
          else
            echo "Found caches to delete:"
            echo "$CACHES" | while read -r cache_id; do
              echo "  Deleting cache ID: $cache_id"
              gh cache delete "$cache_id" || echo "    ‚ö†Ô∏è Failed to delete cache $cache_id"
              sleep 0.5  # Rate limiting
            done
          fi

      - name: "Execute Artifacts Cleanup"
        if: github.event.inputs.cleanup_scope == 'cache_cleanup' || github.event.inputs.cleanup_scope == 'full_cleanup'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "üóëÔ∏è Cleaning up workflow artifacts..."
          
          # Note: Artifacts are automatically cleaned up by GitHub after retention period
          # But we can list and report on them
          gh run list --limit 100 --json databaseId | jq -r '.[] | .databaseId' | while read -r run_id; do
            ARTIFACTS=$(gh run view "$run_id" --json artifacts --jq '.artifacts[] | .name' 2>/dev/null || echo "")
            if [ -n "$ARTIFACTS" ]; then
              echo "  Run $run_id has artifacts: $ARTIFACTS"
            fi
          done
          
          echo "‚ÑπÔ∏è Note: Artifacts are automatically cleaned up by GitHub retention policies"

  cleanup-report:
    name: "üìä Cleanup Report"
    runs-on: ubuntu-latest
    needs: [cleanup-analysis, workflow-cleanup]
    if: always()
    
    steps:
      - name: "Generate Cleanup Report"
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "# üßπ OPS-Zeta Workflow Cleanup Report"
          echo ""
          echo "**Execution Time:** $(date)"
          echo "**Mode:** ${{ github.event.inputs.dry_run == 'true' && 'DRY RUN' || 'LIVE EXECUTION' }}"
          echo "**Scope:** ${{ github.event.inputs.cleanup_scope }}"
          echo ""
          echo "## üìã Analysis Results"
          echo "- **Total Runs:** ${{ needs.cleanup-analysis.outputs.total_runs }}"
          echo "- **Failed Runs:** ${{ needs.cleanup-analysis.outputs.failed_runs }}"
          echo "- **Old Runs:** ${{ needs.cleanup-analysis.outputs.old_runs }}"
          echo ""
          echo "## üéØ Cleanup Plan"
          echo "${{ needs.cleanup-analysis.outputs.cleanup_plan }}"
          echo ""
          
          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo "## ‚ö†Ô∏è Dry Run Mode"
            echo "No actual changes were made. Run with 'dry_run: false' to execute cleanup."
          else
            echo "## ‚úÖ Cleanup Executed"
            echo "Cleanup operations have been performed as specified."
            
            # Get updated counts
            NEW_TOTAL=$(gh run list --limit 500 --json databaseId | jq 'length')
            echo "- **Remaining Runs:** $NEW_TOTAL"
          fi
          
          echo ""
          echo "## üöÄ Next Steps"
          echo "- Monitor workflow performance after cleanup"
          echo "- Set up regular cleanup schedule if needed"
          echo "- Review retention policies for future runs"

  dry-run-report:
    name: "üìã Dry Run Preview"
    runs-on: ubuntu-latest
    needs: cleanup-analysis
    if: github.event.inputs.dry_run == 'true'
    
    steps:
      - name: "Preview Cleanup Actions"
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "# üîç DRY RUN - Cleanup Preview"
          echo ""
          echo "**This is a preview - no changes will be made**"
          echo ""
          echo "## üìä Current State"
          echo "- Total workflow runs: ${{ needs.cleanup-analysis.outputs.total_runs }}"
          echo "- Failed/cancelled runs: ${{ needs.cleanup-analysis.outputs.failed_runs }}"
          echo "- Old runs (> ${{ github.event.inputs.days_to_keep || 7 }} days): ${{ needs.cleanup-analysis.outputs.old_runs }}"
          echo ""
          echo "## üéØ Planned Actions"
          echo "${{ needs.cleanup-analysis.outputs.cleanup_plan }}"
          echo ""
          echo "## ‚ö†Ô∏è Impact Assessment"
          case "${{ github.event.inputs.cleanup_scope }}" in
            "failed_runs")
              echo "- ‚úÖ Low impact: Only removes failed/cancelled runs"
              echo "- ‚úÖ Preserves successful run history"
              ;;
            "old_runs")
              echo "- ‚ö†Ô∏è Medium impact: Removes runs older than ${{ github.event.inputs.days_to_keep || 7 }} days"
              echo "- ‚úÖ Preserves recent run history"
              ;;
            "all_runs")
              echo "- üö® HIGH IMPACT: Will remove ALL workflow run history"
              echo "- ‚ùå No run history will be preserved"
              ;;
            "cache_cleanup")
              echo "- ‚úÖ Low impact: Only affects cache and artifacts"
              echo "- ‚úÖ Run history preserved"
              ;;
            "full_cleanup")
              echo "- üö® MAXIMUM IMPACT: Complete cleanup of all workflow data"
              echo "- ‚ùå All run history, cache, and artifacts will be removed"
              ;;
          esac
          echo ""
          echo "## üöÄ To Execute"
          echo "Set 'dry_run' to 'false' and re-run this workflow to perform the cleanup."
