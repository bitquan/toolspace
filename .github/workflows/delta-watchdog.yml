name: OPS-Delta Watchdog

on:
    workflow_run:
        workflows:
            - "OPS-Delta Scheduler"
            - "OPS-Delta Progress Tracker"
            - "OPS-Delta Weekly Report"
        types:
            - completed
    workflow_dispatch:
        inputs:
            dry_run:
                description: "Dry run (true/false)"
                required: true
                default: "true"
                type: string
            force_check:
                description: "Force check all workflows"
                required: false
                default: "false"
                type: string

permissions:
    contents: read
    issues: write
    actions: read

jobs:
    monitor-workflows:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout repository
              uses: actions/checkout@v5

            - name: Monitor Delta workflow health
              id: monitor
              uses: actions/github-script@v8
              with:
                  script: |
                      const dry = (core.getInput('dry_run') || '${{ github.event.inputs.dry_run }}' || 'false').toLowerCase() === 'true';
                      const forceCheck = '${{ github.event.inputs.force_check }}' === 'true';

                      console.log(`🔍 OPS-Delta Watchdog Starting`);
                      console.log(`Dry Run: ${dry}`);
                      console.log(`Force Check: ${forceCheck}`);

                      // Define delta workflows to monitor
                      const deltaWorkflows = [
                        'delta-scheduler.yml',
                        'delta-progress.yml',
                        'delta-report.yml'
                      ];

                      const workflowAliases = {
                        'delta-scheduler.yml': 'OPS-Delta Scheduler',
                        'delta-progress.yml': 'OPS-Delta Progress Tracker',
                        'delta-report.yml': 'OPS-Delta Weekly Report'
                      };

                      const failures = [];
                      const warnings = [];

                      // Check each workflow's recent runs
                      for (const workflowFile of deltaWorkflows) {
                        try {
                          console.log(`📊 Checking workflow: ${workflowFile}`);

                          // Get workflow ID first
                          const workflows = await github.rest.actions.listRepoWorkflows({
                            owner: context.repo.owner,
                            repo: context.repo.repo
                          });

                          const workflow = workflows.data.workflows.find(w => w.path.endsWith(workflowFile));
                          if (!workflow) {
                            warnings.push(`Workflow file ${workflowFile} not found`);
                            continue;
                          }

                          // Get recent runs (last 10)
                          const runs = await github.rest.actions.listWorkflowRuns({
                            owner: context.repo.owner,
                            repo: context.repo.repo,
                            workflow_id: workflow.id,
                            per_page: 10
                          });

                          if (runs.data.workflow_runs.length === 0) {
                            warnings.push(`No runs found for ${workflowFile}`);
                            continue;
                          }

                          // Check for consecutive failures
                          const recentRuns = runs.data.workflow_runs.slice(0, 5);
                          const consecutiveFailures = [];

                          for (const run of recentRuns) {
                            if (run.conclusion === 'failure') {
                              consecutiveFailures.push(run);
                            } else {
                              break; // Stop at first success
                            }
                          }

                          console.log(`  Recent runs: ${recentRuns.length}`);
                          console.log(`  Consecutive failures: ${consecutiveFailures.length}`);

                          // Alert on 2+ consecutive failures
                          if (consecutiveFailures.length >= 2) {
                            const failure = {
                              workflow: workflowFile,
                              name: workflowAliases[workflowFile] || workflowFile,
                              consecutiveFailures: consecutiveFailures.length,
                              lastFailure: consecutiveFailures[0],
                              runs: consecutiveFailures.slice(0, 3) // Include up to 3 failed runs
                            };

                            failures.push(failure);
                            console.log(`❌ ALERT: ${workflowFile} has ${consecutiveFailures.length} consecutive failures`);
                          } else if (consecutiveFailures.length === 1) {
                            warnings.push(`${workflowFile} has 1 recent failure (monitoring)`);
                          } else {
                            console.log(`✅ ${workflowFile} is healthy`);
                          }

                        } catch (error) {
                          console.log(`❌ Error checking ${workflowFile}: ${error.message}`);
                          warnings.push(`Error checking ${workflowFile}: ${error.message}`);
                        }
                      }

                      // Generate maintenance issues for failures
                      const createdIssues = [];

                      for (const failure of failures) {
                        const issueTitle = `🚨 OPS-Delta Maintenance: ${failure.name} failing`;

                        // Build issue body with proper escaping
                        const failedRunsList = failure.runs.map(run =>
                          `- **${run.created_at}**: [Run #${run.run_number}](${run.html_url}) - \`${run.conclusion}\``
                        ).join('\\n');

                        const issueBody = `# Workflow Failure Alert\\n\\n` +
                                        `**Workflow:** \`${failure.workflow}\` (${failure.name})\\n` +
                                        `**Consecutive Failures:** ${failure.consecutiveFailures}\\n` +
                                        `**Last Failure:** ${failure.lastFailure.created_at}\\n` +
                                        `**Run URL:** ${failure.lastFailure.html_url}\\n\\n` +
                                        `## Recent Failed Runs\\n\\n` +
                                        failedRunsList + '\\n\\n' +
                                        `## Troubleshooting Steps\\n\\n` +
                                        `1. **Check the workflow logs** for specific error messages\\n` +
                                        `2. **Review recent changes** that might have affected the workflow\\n` +
                                        `3. **Verify dependencies** (GitHub tokens, repository permissions, external APIs)\\n` +
                                        `4. **Check for quota limits** or API rate limiting\\n` +
                                        `5. **Test workflow manually** with dry-run mode if available\\n\\n` +
                                        `## Auto-Generated Details\\n\\n` +
                                        `- **Detection Time:** ${new Date().toISOString()}\\n` +
                                        `- **Repository:** ${context.repo.owner}/${context.repo.repo}\\n` +
                                        `- **Detected By:** OPS-Delta Watchdog\\n` +
                                        `- **Severity:** High (${failure.consecutiveFailures} consecutive failures)\\n\\n` +
                                        `## Next Steps\\n\\n` +
                                        `- [ ] Investigate root cause\\n` +
                                        `- [ ] Fix underlying issue\\n` +
                                        `- [ ] Test workflow manually\\n` +
                                        `- [ ] Monitor for continued failures\\n` +
                                        `- [ ] Update watchdog rules if needed\\n\\n` +
                                        `---\\n` +
                                        `*This issue was automatically created by OPS-Delta Watchdog when ${failure.consecutiveFailures} consecutive workflow failures were detected.*`;

                        if (!dry) {
                          try {
                            // Check if similar issue already exists
                            const existingIssues = await github.rest.issues.listForRepo({
                              owner: context.repo.owner,
                              repo: context.repo.repo,
                              state: 'open',
                              labels: 'P1,maintenance,ops-delta',
                              per_page: 50
                            });

                            const duplicateIssue = existingIssues.data.find(issue =>
                              issue.title.includes(failure.name) &&
                              issue.title.includes('failing')
                            );

                            if (duplicateIssue) {
                              console.log(`ℹ️ Similar issue already exists: #${duplicateIssue.number}`);

                              // Add a comment with new failure info
                              const updateComment = `🔄 **Failure Update - ${new Date().toISOString().split('T')[0]}**\\n\\n` +
                                                  `Consecutive failures now: **${failure.consecutiveFailures}**\\n` +
                                                  `Latest failure: [Run #${failure.lastFailure.run_number}](${failure.lastFailure.html_url})\\n\\n` +
                                                  `*Updated by OPS-Delta Watchdog*`;

                              await github.rest.issues.createComment({
                                owner: context.repo.owner,
                                repo: context.repo.repo,
                                issue_number: duplicateIssue.number,
                                body: updateComment
                              });

                              createdIssues.push(`Updated existing issue #${duplicateIssue.number}`);
                            } else {
                              // Create new maintenance issue
                              const newIssue = await github.rest.issues.create({
                                owner: context.repo.owner,
                                repo: context.repo.repo,
                                title: issueTitle,
                                body: issueBody,
                                labels: ['P1', 'maintenance', 'ops-delta', 'bug']
                              });

                              console.log(`🆘 Created maintenance issue #${newIssue.data.number} for ${failure.name}`);
                              createdIssues.push(`Created issue #${newIssue.data.number} for ${failure.name}`);
                            }

                          } catch (error) {
                            console.log(`❌ Failed to create issue for ${failure.name}: ${error.message}`);
                            warnings.push(`Failed to create issue for ${failure.name}: ${error.message}`);
                          }
                        } else {
                          console.log(`[DRY] Would create P1 maintenance issue for ${failure.name}`);
                          createdIssues.push(`[DRY] Would create issue for ${failure.name}`);
                        }
                      }

                      // Generate summary
                      const healthStatus = failures.length === 0 ? '🟢 Healthy' :
                                         failures.length === 1 ? '🟡 Issues Detected' :
                                         '🔴 Multiple Issues';

                      core.summary.addHeading('OPS-Delta Watchdog Report', 2);
                      core.summary.addTable([
                        ['Metric', 'Value'],
                        ['Overall Health', healthStatus],
                        ['Workflows Monitored', deltaWorkflows.length.toString()],
                        ['Critical Failures', failures.length.toString()],
                        ['Warnings', warnings.length.toString()],
                        ['Maintenance Issues', createdIssues.length.toString()],
                        ['Mode', dry ? 'Dry Run' : 'Live']
                      ]);

                      if (failures.length > 0) {
                        core.summary.addHeading('Critical Failures', 3);
                        const failureTable = [['Workflow', 'Consecutive Failures', 'Last Failure', 'Action']];
                        failures.forEach(failure => {
                          failureTable.push([
                            failure.name,
                            failure.consecutiveFailures.toString(),
                            failure.lastFailure.created_at.split('T')[0],
                            dry ? 'Would create issue' : 'Issue created'
                          ]);
                        });
                        core.summary.addTable(failureTable);
                      }

                      if (warnings.length > 0) {
                        core.summary.addHeading('Warnings', 3);
                        core.summary.addList(warnings);
                      }

                      if (createdIssues.length > 0) {
                        core.summary.addHeading('Actions Taken', 3);
                        core.summary.addList(createdIssues);
                      }

                      await core.summary.write();

                      console.log(`🎯 Watchdog complete - Health: ${healthStatus}`);
                      console.log(`Critical failures: ${failures.length}, Warnings: ${warnings.length}`);

                      // Set output for potential downstream actions
                      core.setOutput('health_status', healthStatus);
                      core.setOutput('critical_failures', failures.length);
                      core.setOutput('warnings_count', warnings.length);

            - name: Send critical alerts
              if: steps.monitor.outputs.critical_failures > 0 && github.event.inputs.dry_run != 'true'
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  echo "Sending critical workflow failure alert..."
                  gh workflow run delta-notify.yml \
                    -f event_type="workflow_failed" \
                    -f title="🚨 Critical Workflow Failures Detected" \
                    -f message="${{ steps.monitor.outputs.critical_failures }} OPS-Delta workflows have consecutive failures. Maintenance issues have been created automatically." \
                    -f severity="critical" \
                    -f dry_run="false"

            - name: Send health summary
              if: github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run != 'true'
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  echo "Sending system health summary..."
                  gh workflow run delta-notify.yml \
                    -f event_type="system_health" \
                    -f title="🔍 OPS-Delta Health Check Complete" \
                    -f message="System health status: ${{ steps.monitor.outputs.health_status }}. Critical failures: ${{ steps.monitor.outputs.critical_failures }}, Warnings: ${{ steps.monitor.outputs.warnings_count }}" \
                    -f severity="info" \
                    -f dry_run="false"
