name: OPS-Epsilon Notify

on:
  workflow_call:
    inputs:
      event_type:
        description: "Type of event (sprint_scheduled, issues_completed,
          workflow_failed, system_health)"
        required: true
        type: string
      title:
        description: "Notification title"
        required: true
        type: string
      message:
        description: "Notification message"
        required: true
        type: string
      severity:
        description: "Severity level (info, warning, error, critical)"
        required: false
        default: "info"
        type: string
      data:
        description: "Additional data as JSON string"
        required: false
        default: "{}"
        type: string
      dry_run:
        description: "Dry run (true/false)"
        required: false
        default: "true"
        type: string
    secrets:
      DISCORD_WEBHOOK_URL:
        description: "Discord webhook URL"
        required: false
      SLACK_WEBHOOK_URL:
        description: "Slack webhook URL"
        required: false
  workflow_dispatch:
    inputs:
      event_type:
        description: "Type of event"
        required: true
        default: "test"
        type: choice
        options:
          - test
          - sprint_scheduled
          - issues_completed
          - workflow_failed
          - system_health
      title:
        description: "Notification title"
        required: true
        default: "Test Notification"
        type: string
      message:
        description: "Notification message"
        required: true
        default: "This is a test notification from OPS-Epsilon"
        type: string
      severity:
        description: "Severity level"
        required: false
        default: "info"
        type: choice
        options:
          - info
          - warning
          - error
          - critical
      dry_run:
        description: "Dry run (true/false)"
        required: false
        default: "true"
        type: string

permissions:
  contents: read
  actions: read

jobs:
  notify:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm install

      - name: Send notifications
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: actions/github-script@v7
        with:
          script: |
            const dry = '${{ inputs.dry_run }}' !== 'false';
            const eventType = '${{ inputs.event_type }}';
            const title = '${{ inputs.title }}';
            const message = '${{ inputs.message }}';
            const severity = '${{ inputs.severity }}' || 'info';
            const additionalData = JSON.parse('${{ inputs.data }}' || '{}');

            core.info(`üîî OPS-Epsilon Notify Starting`);
            core.info(`Event: ${eventType} | Severity: ${severity} | Dry Run: ${dry}`);

            // Severity configuration
            const severityConfig = {
              info: { emoji: 'üí°', color: 3447003 }, // Blue
              warning: { emoji: '‚ö†Ô∏è', color: 16776960 }, // Yellow
              error: { emoji: '‚ùå', color: 15158332 }, // Red
              critical: { emoji: 'üö®', color: 10038562 } // Dark red
            };

            const config = severityConfig[severity] || severityConfig.info;

            // Generate timestamp
            const timestamp = new Date().toISOString();
            const readableTime = new Date().toLocaleString('en-US', {
              timeZone: 'UTC',
              year: 'numeric',
              month: 'short',
              day: 'numeric',
              hour: '2-digit',
              minute: '2-digit',
              second: '2-digit'
            });

            // Build notification context
            const context = {
              repository: `${context.repo.owner}/${context.repo.repo}`,
              workflow: context.workflow,
              runId: context.runId,
              actor: context.actor,
              timestamp,
              readableTime,
              ...additionalData
            };

            // Format messages for different platforms
            const formatters = {
              discord: (title, message, context, config) => ({
                embeds: [{
                  title: `${config.emoji} ${title}`,
                  description: message,
                  color: config.color,
                  timestamp: context.timestamp,
                  fields: [
                    { name: 'Repository', value: context.repository, inline: true },
                    { name: 'Event Type', value: eventType, inline: true },
                    { name: 'Severity', value: severity.toUpperCase(), inline: true },
                    ...(context.sprint ? [{ name: 'Sprint', value: context.sprint, inline: true }] : []),
                    ...(context.issuesCount ? [{ name: 'Issues', value: context.issuesCount.toString(), inline: true }] : []),
                    ...(context.velocity ? [{ name: 'Velocity', value: `${context.velocity} pts/week`, inline: true }] : [])
                  ],
                  footer: {
                    text: `OPS-Epsilon ‚Ä¢ ${context.readableTime} UTC`,
                    icon_url: 'https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png'
                  }
                }]
              }),

              slack: (title, message, context, config) => ({
                text: `${config.emoji} ${title}`,
                attachments: [{
                  color: severity === 'critical' ? 'danger' :
                         severity === 'error' ? 'danger' :
                         severity === 'warning' ? 'warning' : 'good',
                  fields: [
                    { title: 'Message', value: message, short: false },
                    { title: 'Repository', value: context.repository, short: true },
                    { title: 'Event Type', value: eventType, short: true },
                    { title: 'Severity', value: severity.toUpperCase(), short: true },
                    ...(context.sprint ? [{ title: 'Sprint', value: context.sprint, short: true }] : []),
                    ...(context.issuesCount ? [{ title: 'Issues', value: context.issuesCount.toString(), short: true }] : []),
                    ...(context.velocity ? [{ title: 'Velocity', value: `${context.velocity} pts/week`, short: true }] : [])
                  ],
                  footer: 'OPS-Epsilon',
                  footer_icon: 'https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png',
                  ts: Math.floor(new Date(context.timestamp).getTime() / 1000)
                }]
              })
            };

            const notifications = [];

            // Discord notification
            if (process.env.DISCORD_WEBHOOK_URL) {
              const payload = formatters.discord(title, message, context, config);
              notifications.push({
                platform: 'Discord',
                url: process.env.DISCORD_WEBHOOK_URL,
                payload,
                headers: { 'Content-Type': 'application/json' }
              });
            }

            // Slack notification
            if (process.env.SLACK_WEBHOOK_URL) {
              const payload = formatters.slack(title, message, context, config);
              notifications.push({
                platform: 'Slack',
                url: process.env.SLACK_WEBHOOK_URL,
                payload,
                headers: { 'Content-Type': 'application/json' }
              });
            }

            if (notifications.length === 0) {
              core.info('‚ÑπÔ∏è No webhook URLs configured, skipping notifications');

              core.summary.addHeading('OPS-Epsilon Notification Results', 2);
              core.summary.addTable([
                ['Platform', 'Status', 'Message'],
                ['Discord', 'Skipped', 'No DISCORD_WEBHOOK_URL configured'],
                ['Slack', 'Skipped', 'No SLACK_WEBHOOK_URL configured']
              ]);
              await core.summary.write();
              return;
            }

            // Send notifications
            const results = [];

            for (const notification of notifications) {
              try {
                if (dry) {
                  core.info(`[DRY] Would send ${notification.platform} notification:`);
                  core.info(JSON.stringify(notification.payload, null, 2));
                  results.push({
                    platform: notification.platform,
                    status: 'Dry Run',
                    message: 'Would send notification'
                  });
                  continue;
                }

                const response = await fetch(notification.url, {
                  method: 'POST',
                  headers: notification.headers,
                  body: JSON.stringify(notification.payload)
                });

                if (response.ok) {
                  core.info(`‚úÖ ${notification.platform} notification sent successfully`);
                  results.push({
                    platform: notification.platform,
                    status: 'Success',
                    message: `Sent at ${readableTime} UTC`
                  });
                } else {
                  const errorText = await response.text();
                  core.error(`‚ùå ${notification.platform} notification failed: ${response.status} ${errorText}`);
                  results.push({
                    platform: notification.platform,
                    status: 'Failed',
                    message: `HTTP ${response.status}: ${errorText}`
                  });
                }

              } catch (error) {
                core.error(`‚ùå ${notification.platform} notification error: ${error.message}`);
                results.push({
                  platform: notification.platform,
                  status: 'Error',
                  message: error.message
                });
              }
            }

            // Generate summary
            core.summary.addHeading('OPS-Epsilon Notification Results', 2);
            core.summary.addTable([
              ['Metric', 'Value'],
              ['Event Type', eventType],
              ['Severity', severity],
              ['Mode', dry ? 'Dry Run' : 'Live'],
              ['Platforms Attempted', notifications.length.toString()],
              ['Successful Sends', results.filter(r => r.status === 'Success').length.toString()]
            ]);

            if (results.length > 0) {
              core.summary.addHeading('Platform Results', 3);
              const resultTable = [['Platform', 'Status', 'Details']];
              results.forEach(result => {
                resultTable.push([result.platform, result.status, result.message]);
              });
              core.summary.addTable(resultTable);
            }

            await core.summary.write();

            core.info(`üîî Notification complete - ${results.filter(r => r.status === 'Success').length}/${notifications.length} sent`);

            // Set outputs for potential downstream workflows
            core.setOutput('notifications_sent', results.filter(r => r.status === 'Success').length);
            core.setOutput('notifications_failed', results.filter(r => r.status === 'Failed' || r.status === 'Error').length);
