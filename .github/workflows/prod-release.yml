name: Production Release

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      dry_run:
        description: "Dry run mode (no actual deployment)"
        required: false
        type: boolean
        default: true
      tag:
        description: "Tag to deploy (e.g., v1.0.0)"
        required: false
        type: string

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  preflight-checks:
    name: 🔍 Preflight Security & Config Checks
    runs-on: ubuntu-latest
    outputs:
      release-check-status: ${{ steps.release-check.outputs.status }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag || github.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Run release check
        id: release-check
        run: |
          if [ ! -f "scripts/release-check.mjs" ]; then
            echo "⚠️ scripts/release-check.mjs not found, skipping validation"
            echo "status=skip" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          node scripts/release-check.mjs
          echo "status=pass" >> $GITHUB_OUTPUT

      - name: Run auth-security-ok composite
        uses: ./.github/actions/auth-security-ok
        if: hashFiles('.github/actions/auth-security-ok/**') != ''

  build-flutter:
    name: 🏗️ Build Flutter Web
    runs-on: ubuntu-latest
    needs: preflight-checks
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag || github.ref }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.24.0"
          channel: "stable"
          cache: true

      - name: Get dependencies
        run: flutter pub get

      - name: Analyze code
        run: flutter analyze

      - name: Run tests
        run: flutter test

      - name: Build web release
        run: flutter build web --release --web-renderer html --base-href /

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: flutter-web-build
          path: build/web/
          retention-days: 1

  build-functions:
    name: 🔧 Build and Test Functions
    runs-on: ubuntu-latest
    needs: preflight-checks
    defaults:
      run:
        working-directory: functions
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag || github.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: functions/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint

      - name: Build TypeScript
        run: npm run build

      - name: Run unit tests
        run: npm test

      - name: Upload functions build
        uses: actions/upload-artifact@v4
        with:
          name: functions-build
          path: functions/lib/
          retention-days: 1

  deploy:
    name: � Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-flutter, build-functions]
    if: ${{ !inputs.dry_run }}
    environment:
      name: production
      url: https://your-prod-project-id.web.app
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag || github.ref }}

      - name: Download Flutter build
        uses: actions/download-artifact@v4
        with:
          name: flutter-web-build
          path: build/web/

      - name: Download Functions build
        uses: actions/download-artifact@v4
        with:
          name: functions-build
          path: functions/lib/

      - name: Setup Firebase CLI
        run: |
          npm install -g firebase-tools
          echo "FIREBASE_TOKEN=${{ secrets.FIREBASE_TOKEN }}" >> $GITHUB_ENV

      - name: Deploy to Firebase
        run: |
          firebase use your-prod-project-id
          firebase deploy --only hosting,functions
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

  smoke-tests:
    name: 🔍 Post-Deploy Smoke Tests
    runs-on: ubuntu-latest
    needs: deploy
    if: ${{ !inputs.dry_run }}
    steps:
      - name: Test homepage
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" https://your-prod-project-id.web.app)
          if [ "$response" != "200" ]; then
            echo "❌ Homepage returned $response"
            exit 1
          fi
          echo "✅ Homepage returned 200"

      - name: Test features page
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" https://your-prod-project-id.web.app/features)
          if [ "$response" != "200" ]; then
            echo "❌ Features page returned $response"
            exit 1
          fi
          echo "✅ Features page returned 200"

      - name: Test pricing page
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" https://your-prod-project-id.web.app/pricing)
          if [ "$response" != "200" ]; then
            echo "❌ Pricing page returned $response"
            exit 1
          fi
          echo "✅ Pricing page returned 200"

  dry-run-summary:
    name: 📋 Dry Run Summary
    runs-on: ubuntu-latest
    needs: [build-flutter, build-functions]
    if: ${{ inputs.dry_run }}
    steps:
      - name: Dry run completed
        run: |
          echo "🎯 **Dry Run Summary**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Flutter web build completed successfully" >> $GITHUB_STEP_SUMMARY
          echo "✅ Functions build and tests completed successfully" >> $GITHUB_STEP_SUMMARY
          echo "✅ All preflight checks passed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🚀 **Ready for production deployment!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "To deploy to production:" >> $GITHUB_STEP_SUMMARY
          echo "1. Re-run this workflow with dry_run=false" >> $GITHUB_STEP_SUMMARY
          echo "2. Or push the tag to trigger automatic deployment" >> $GITHUB_STEP_SUMMARY
