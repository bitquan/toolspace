name: Production Release

on:
    push:
        tags:
            - "v*.*.*"
    workflow_dispatch:
        inputs:
            dry_run:
                description: "Dry run mode (no actual deployment)"
                required: false
                type: boolean
                default: true
            tag:
                description: "Tag to deploy (e.g., v1.0.0)"
                required: false
                type: string

permissions:
    contents: read

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

jobs:
    preflight-checks:
        name: üîç Preflight Security & Config Checks
        runs-on: ubuntu-latest
        outputs:
            release-check-status: ${{ steps.release-check.outputs.status }}
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "20"
                  cache: "npm"

            - name: Install dependencies
              run: npm ci

            - name: Run Release Validation
              id: release-check
              run: |
                  echo "Running pre-release validation checks..."
                  node scripts/release-check.mjs
                  echo "status=passed" >> $GITHUB_OUTPUT

            - name: Validate Security Configuration
              run: |
                  if [ -f "firestore.rules" ]; then
                    echo "‚úÖ Firestore rules found"
                  else
                    echo "‚ùå Firestore rules missing"
                    exit 1
                  fi

                  if [ -f "storage.rules" ]; then
                    echo "‚úÖ Storage rules found"
                  else
                    echo "‚ùå Storage rules missing"
                    exit 1
                  fi

            - name: Check for Production Secrets
              run: |
                  echo "Checking for required production secrets..."
                  # This will be validated by the actual deployment step
                  echo "‚úÖ Secret validation placeholder - actual check in deploy step"

    build-flutter:
        name: üèóÔ∏è Build Flutter Web
        runs-on: ubuntu-latest
        needs: preflight-checks
        permissions:
            contents: read
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Flutter
              uses: subosito/flutter-action@v2
              with:
                  flutter-version: "3.24.0"
                  channel: "stable"
                  cache: true

            - name: Get Flutter dependencies
              run: flutter pub get

            - name: Run Flutter analyze
              run: flutter analyze

            - name: Run Flutter tests
              run: flutter test

            - name: Build Flutter web (production)
              env:
                  FIREBASE_PROJECT_ID: "your-prod-project-id"
                  PROD_DOMAIN: "app.example.com"
                  STRIPE_PUBLISHABLE_KEY: "pk_live_placeholder"
              run: |
                  flutter build web \
                    --release \
                    --web-renderer html \
                    --dart-define=FIREBASE_PROJECT_ID=$FIREBASE_PROJECT_ID \
                    --dart-define=PROD_DOMAIN=$PROD_DOMAIN \
                    --dart-define=STRIPE_PUBLISHABLE_KEY=$STRIPE_PUBLISHABLE_KEY

            - name: Upload Flutter build artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: flutter-web-build
                  path: build/web/
                  retention-days: 1

    build-functions:
        name: üîß Build Cloud Functions
        runs-on: ubuntu-latest
        needs: preflight-checks
        permissions:
            contents: read
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "20"
                  cache: "npm"
                  cache-dependency-path: functions/package-lock.json

            - name: Install Functions dependencies
              working-directory: functions
              run: npm ci

            - name: Lint Functions code
              working-directory: functions
              run: npm run lint

            - name: Run Functions tests
              working-directory: functions
              run: npm test

            - name: Build Functions
              working-directory: functions
              run: npm run build

            - name: Upload Functions build artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: functions-build
                  path: functions/
                  retention-days: 1

    deploy:
        name: üöÄ Deploy to Production
        runs-on: ubuntu-latest
        needs: [build-flutter, build-functions]
        if: ${{ !inputs.dry_run }}
        permissions:
            contents: read
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Download Flutter artifacts
              uses: actions/download-artifact@v4
              with:
                  name: flutter-web-build
                  path: build/web/

            - name: Download Functions artifacts
              uses: actions/download-artifact@v4
              with:
                  name: functions-build
                  path: functions/

            - name: Setup Firebase CLI
              run: |
                  npm install -g firebase-tools@latest
                  firebase --version

            - name: Validate Firebase Project Access
              env:
                  FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
                  FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
              run: |
                  echo "Validating Firebase project access..."
                  firebase projects:list --token "$FIREBASE_TOKEN"
                  firebase use "$FIREBASE_PROJECT_ID" --token "$FIREBASE_TOKEN"

            - name: Deploy to Firebase Hosting
              env:
                  FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
                  FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
              run: |
                  echo "Deploying to Firebase Hosting..."
                  firebase deploy --only hosting --token "$FIREBASE_TOKEN" --project "$FIREBASE_PROJECT_ID"

            - name: Deploy Cloud Functions
              env:
                  FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
                  FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
              run: |
                  echo "Deploying Cloud Functions..."
                  firebase deploy --only functions --token "$FIREBASE_TOKEN" --project "$FIREBASE_PROJECT_ID"

            - name: Deploy Security Rules
              env:
                  FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
                  FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
              run: |
                  echo "Deploying Firestore and Storage rules..."
                  firebase deploy --only firestore:rules,storage --token "$FIREBASE_TOKEN" --project "$FIREBASE_PROJECT_ID"

    smoke-tests:
        name: üß™ Production Smoke Tests
        runs-on: ubuntu-latest
        needs: deploy
        if: ${{ !inputs.dry_run }}
        permissions:
            contents: read
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js for testing
              uses: actions/setup-node@v4
              with:
                  node-version: "20"

            - name: Basic connectivity test
              env:
                  PROD_DOMAIN: ${{ secrets.PROD_DOMAIN }}
              run: |
                  echo "Testing production deployment..."
                  curl -f -s -o /dev/null "https://$PROD_DOMAIN" || {
                    echo "‚ùå Production site not responding"
                    exit 1
                  }
                  echo "‚úÖ Production site responding"

            - name: API Health Check
              env:
                  FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
              run: |
                  echo "Testing Functions API..."
                  # Add your API health check here
                  echo "‚úÖ API health check placeholder"

    notify-success:
        name: üì¢ Notify Deployment Success
        runs-on: ubuntu-latest
        needs: [deploy, smoke-tests]
        if: ${{ success() && !inputs.dry_run }}
        permissions:
            contents: read
        steps:
            - name: Deployment Success Notification
              run: |
                  echo "üéâ Production deployment completed successfully!"
                  echo "Deployed version: ${{ github.ref_name }}"
                  echo "Deployment time: $(date -u)"

    notify-failure:
        name: üö® Notify Deployment Failure
        runs-on: ubuntu-latest
        needs: [deploy, smoke-tests]
        if: ${{ failure() }}
        permissions:
            contents: read
        steps:
            - name: Deployment Failure Notification
              run: |
                  echo "‚ùå Production deployment failed!"
                  echo "Failed version: ${{ github.ref_name }}"
                  echo "Failure time: $(date -u)"
                  echo "Please check the logs and investigate immediately."
