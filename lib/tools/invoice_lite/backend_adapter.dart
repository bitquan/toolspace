import 'models/models.dart';

/// Feature flag for backend selection
/// Set to false to use real Firebase Functions in production
const bool kUseMockInvoiceBackend = true;

/// Interface for invoice backend operations (PDF generation, payment links)
abstract class InvoiceBackendAdapter {
  /// Generate a PDF for the invoice and return its URL
  Future<Uri> generatePdf(InvoiceLite invoice);

  /// Create a payment link for the invoice
  Future<Uri> createPaymentLink(InvoiceLite invoice);
}

/// Mock implementation for development and testing
class MockInvoiceBackendAdapter implements InvoiceBackendAdapter {
  // Simulate network delay
  final Duration _delay;

  MockInvoiceBackendAdapter({Duration delay = const Duration(milliseconds: 300)})
      : _delay = delay;

  @override
  Future<Uri> generatePdf(InvoiceLite invoice) async {
    await Future.delayed(_delay);
    
    // Return a mock PDF URL
    final timestamp = DateTime.now().millisecondsSinceEpoch;
    return Uri.parse(
      'https://storage.googleapis.com/toolspace-mock/invoices/${invoice.id}_$timestamp.pdf',
    );
  }

  @override
  Future<Uri> createPaymentLink(InvoiceLite invoice) async {
    await Future.delayed(_delay);
    
    // Return a mock Stripe checkout URL
    // In production, this would be generated by Stripe Checkout API
    final sessionId = 'cs_test_mock_${invoice.id}_${DateTime.now().millisecondsSinceEpoch}';
    return Uri.parse('https://checkout.stripe.com/c/pay/$sessionId');
  }
}

/// Firebase Functions implementation (scaffold for future implementation)
class FunctionsInvoiceBackendAdapter implements InvoiceBackendAdapter {
  // TODO: Wire up to Firebase Functions when functions/src/invoices are ready
  
  @override
  Future<Uri> generatePdf(InvoiceLite invoice) async {
    // TODO: Call callable function: generateInvoicePdf(invoiceData)
    // Expected response: { pdfUrl: string, expiresAt: timestamp }
    throw UnimplementedError(
      'FunctionsInvoiceBackendAdapter not yet implemented. '
      'Set kUseMockInvoiceBackend = true to use mock adapter.',
    );
  }

  @override
  Future<Uri> createPaymentLink(InvoiceLite invoice) async {
    // TODO: Call callable function: createInvoicePaymentLink(invoiceData)
    // Expected response: { paymentUrl: string, sessionId: string }
    throw UnimplementedError(
      'FunctionsInvoiceBackendAdapter not yet implemented. '
      'Set kUseMockInvoiceBackend = true to use mock adapter.',
    );
  }
}

/// Factory to get the appropriate backend adapter
InvoiceBackendAdapter createInvoiceBackend() {
  if (kUseMockInvoiceBackend) {
    return MockInvoiceBackendAdapter();
  } else {
    return FunctionsInvoiceBackendAdapter();
  }
}
