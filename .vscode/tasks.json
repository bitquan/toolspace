{
  "version": "2.0.0",
  "tasks": [
    {
      "label": "Preflight: All checks (local == CI)",
      "type": "shell",
      "command": "npm",
      "args": ["run", "preflight"],
      "group": {
        "kind": "test",
        "isDefault": true
      },
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "dedicated",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": [],
      "detail": "üîí OPS-LocalGate: Run full preflight checks before push"
    },
    {
      "label": "Preflight (quick)",
      "type": "shell",
      "command": "npm",
      "args": ["run", "preflight:quick"],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "dedicated",
        "showReuseMessage": false,
        "clear": true
      },
      "problemMatcher": [],
      "detail": "‚ö° OPS-LocalGate: Quick preflight (skip Playwright + web build)"
    },
    {
      "label": "Assign Issue to Copilot",
      "type": "shell",
      "command": "node",
      "args": ["scripts/assign-to-copilot.mjs", "${input:issueNumber}"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new",
        "showReuseMessage": true,
        "clear": false
      },
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "problemMatcher": [],
      "detail": "Assigns a GitHub issue to the Copilot bot and adds 'ready' label for auto-development"
    },
    {
      "label": "Install Node Dependencies",
      "type": "shell",
      "command": "npm",
      "args": ["install"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared",
        "showReuseMessage": true,
        "clear": false
      },
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "problemMatcher": [],
      "detail": "Install Node.js dependencies required for automation scripts"
    },
    {
      "label": "Create Issue",
      "type": "shell",
      "command": "node",
      "args": ["scripts/create-and-assign-issue.mjs"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "new",
        "showReuseMessage": true,
        "clear": false
      },
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "problemMatcher": [],
      "detail": "Create a new GitHub issue with interactive prompts"
    },
    {
      "label": "Create Issue and Assign to Copilot",
      "type": "shell",
      "command": "node",
      "args": ["scripts/create-and-assign-issue.mjs", "--assign"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "new",
        "showReuseMessage": true,
        "clear": false
      },
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "problemMatcher": [],
      "detail": "Create a new GitHub issue and automatically assign to Copilot pipeline"
    },
    {
      "label": "Run Auto-Assignment (Dry Run)",
      "type": "shell",
      "command": "node",
      "args": ["scripts/auto-assign-new-issues.mjs", "--dry-run"],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new",
        "showReuseMessage": true,
        "clear": false
      },
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "problemMatcher": [],
      "detail": "Preview auto-assignment of recent issues without making changes"
    },
    {
      "label": "Approve All Copilot PRs",
      "type": "shell",
      "command": "node",
      "args": ["scripts/approve-copilot-prs.mjs"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new",
        "showReuseMessage": true,
        "clear": false
      },
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "problemMatcher": [],
      "detail": "Bulk approve all open pull requests created by Copilot bot"
    },
    {
      "label": "Approve Copilot PRs (Dry Run)",
      "type": "shell",
      "command": "node",
      "args": ["scripts/approve-copilot-prs.mjs", "--dry-run"],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new",
        "showReuseMessage": true,
        "clear": false
      },
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "problemMatcher": [],
      "detail": "Preview bulk approval of Copilot PRs without making changes"
    },
    {
      "label": "üßπ Cleanup Workflows (Dry Run)",
      "type": "shell",
      "command": "gh",
      "args": [
        "workflow",
        "run",
        "workflow-cleanup.yml",
        "-f",
        "cleanup_scope=failed_runs",
        "-f",
        "dry_run=true"
      ],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new",
        "showReuseMessage": true,
        "clear": false
      },
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "problemMatcher": [],
      "detail": "Preview workflow cleanup - shows what would be cleaned up without making changes"
    },
    {
      "label": "üßπ Cleanup Failed Workflows",
      "type": "shell",
      "command": "gh",
      "args": [
        "workflow",
        "run",
        "workflow-cleanup.yml",
        "-f",
        "cleanup_scope=failed_runs",
        "-f",
        "dry_run=false"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new",
        "showReuseMessage": true,
        "clear": false
      },
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "problemMatcher": [],
      "detail": "Clean up all failed and cancelled workflow runs"
    },
    {
      "label": "üßπ Cleanup Old Workflows",
      "type": "shell",
      "command": "gh",
      "args": [
        "workflow",
        "run",
        "workflow-cleanup.yml",
        "-f",
        "cleanup_scope=old_runs",
        "-f",
        "days_to_keep=7",
        "-f",
        "dry_run=false"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new",
        "showReuseMessage": true,
        "clear": false
      },
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "problemMatcher": [],
      "detail": "Clean up workflow runs older than 7 days"
    },
    {
      "label": "üßπ Full Workflow Cleanup",
      "type": "shell",
      "command": "gh",
      "args": [
        "workflow",
        "run",
        "workflow-cleanup.yml",
        "-f",
        "cleanup_scope=full_cleanup",
        "-f",
        "dry_run=false"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new",
        "showReuseMessage": true,
        "clear": false
      },
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "problemMatcher": [],
      "detail": "‚ö†Ô∏è WARNING: Complete cleanup of ALL workflow runs, cache, and artifacts"
    },
    {
      "label": "üî• Delete ALL Workflows",
      "type": "shell",
      "command": "gh",
      "args": [
        "workflow",
        "run",
        "workflow-cleanup.yml",
        "-f",
        "cleanup_scope=all_runs",
        "-f",
        "dry_run=false"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new",
        "showReuseMessage": true,
        "clear": false
      },
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "problemMatcher": [],
      "detail": "üî• DELETE ALL workflow runs (not reversible!)"
    },
    {
      "label": "üî• Preview Delete ALL Workflows",
      "type": "shell",
      "command": "gh",
      "args": [
        "workflow",
        "run",
        "workflow-cleanup.yml",
        "-f",
        "cleanup_scope=all_runs",
        "-f",
        "dry_run=true"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new",
        "showReuseMessage": true,
        "clear": false
      },
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "problemMatcher": [],
      "detail": "Preview what would be deleted when deleting ALL workflows"
    },
    {
      "label": "üî•üí• NUCLEAR Cleanup",
      "type": "shell",
      "command": "gh",
      "args": [
        "workflow",
        "run",
        "nuclear-cleanup.yml",
        "-f",
        "confirmation=DELETE_ALL_WORKFLOWS",
        "-f",
        "keep_recent=0"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new",
        "showReuseMessage": true,
        "clear": false
      },
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "problemMatcher": [],
      "detail": "üî•üí• NUCLEAR: Immediately delete EVERYTHING (maximum destruction!)"
    },
    {
      "label": "üßπ Cleanup Helper (PowerShell)",
      "type": "shell",
      "command": "powershell",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "scripts/workflow-cleanup.ps1",
        "-Action",
        "${input:cleanupAction}"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "new",
        "showReuseMessage": true,
        "clear": false
      },
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "problemMatcher": [],
      "detail": "Interactive PowerShell cleanup helper with confirmation prompts"
    }
  ],
  "inputs": [
    {
      "id": "issueNumber",
      "description": "Enter the GitHub issue number to assign to Copilot",
      "type": "promptString"
    },
    {
      "label": "üßπ Flutter Clean",
      "type": "shell",
      "command": "flutter",
      "args": ["clean"],
      "group": "build",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "problemMatcher": [],
      "detail": "Clean Flutter build artifacts"
    },
    {
      "label": "üì¶ Flutter Pub Get",
      "type": "shell",
      "command": "flutter",
      "args": ["pub", "get"],
      "group": "build",
      "presentation": {
        "reveal": "always",
        "panel": "shared"
      },
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "problemMatcher": [],
      "detail": "Get Flutter dependencies"
    },
    {
      "label": "üîß Flutter Clean & Get",
      "type": "shell",
      "command": "flutter",
      "args": ["clean"],
      "group": "build",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "problemMatcher": [],
      "detail": "Clean and get Flutter dependencies",
      "dependsOn": ["üßπ Flutter Clean"],
      "dependsOrder": "sequence"
    },
    {
      "label": "üîç Flutter Analyze",
      "type": "shell",
      "command": "flutter",
      "args": ["analyze"],
      "group": "test",
      "presentation": {
        "reveal": "always",
        "panel": "shared"
      },
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "problemMatcher": ["$dart-flutter"],
      "detail": "Run Flutter static analysis"
    },
    {
      "label": "üß™ Flutter Test",
      "type": "shell",
      "command": "flutter",
      "args": ["test"],
      "group": "test",
      "presentation": {
        "reveal": "always",
        "panel": "dedicated"
      },
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "problemMatcher": ["$dart-flutter"],
      "detail": "Run all Flutter tests"
    },
    {
      "label": "üèÉ Flutter Run (Chrome)",
      "type": "shell",
      "command": "flutter",
      "args": ["run", "-d", "chrome"],
      "isBackground": true,
      "group": "build",
      "presentation": {
        "reveal": "always",
        "panel": "dedicated"
      },
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "problemMatcher": [],
      "detail": "Run Flutter app in Chrome browser"
    },
    {
      "label": "üñ•Ô∏è Flutter Run (macOS)",
      "type": "shell",
      "command": "flutter",
      "args": ["run", "-d", "macos"],
      "isBackground": true,
      "group": "build",
      "presentation": {
        "reveal": "always",
        "panel": "dedicated"
      },
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "problemMatcher": [],
      "detail": "Run Flutter app on macOS desktop"
    },
    {
      "label": "üì± Flutter Devices",
      "type": "shell",
      "command": "flutter",
      "args": ["devices"],
      "group": "none",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "problemMatcher": [],
      "detail": "List all available Flutter devices"
    },
    {
      "label": "üöÄ Flutter Doctor",
      "type": "shell",
      "command": "flutter",
      "args": ["doctor", "-v"],
      "group": "none",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "problemMatcher": [],
      "detail": "Check Flutter environment setup"
    },
    {
      "label": "üìä Flutter Build Web",
      "type": "shell",
      "command": "flutter",
      "args": ["build", "web"],
      "group": "build",
      "presentation": {
        "reveal": "always",
        "panel": "dedicated"
      },
      "options": {
        "cwd": "${workspaceFolder}"
      },
      "problemMatcher": ["$dart-flutter"],
      "detail": "Build Flutter web application"
    }
  ],
  "inputs": [
    {
      "id": "issueNumber",
      "description": "Enter the GitHub issue number",
      "type": "promptString"
    },
    {
      "id": "cleanupAction",
      "description": "Select cleanup action",
      "type": "pickString",
      "options": ["preview", "failed", "old", "cache", "all", "full", "help"],
      "default": "preview"
    }
  ]
}
